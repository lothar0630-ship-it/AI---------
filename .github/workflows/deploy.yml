name: Deploy to AWS S3 + CloudFront

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Clear npm cache
        run: npm cache clean --force

      - name: Remove package-lock.json if exists
        run: |
          if [ -f package-lock.json ]; then
            rm package-lock.json
          fi

      - name: Install dependencies
        run: npm install

      - name: Verify ESLint dependencies
        run: |
          echo "Checking ESLint dependencies..."
          npm list @typescript-eslint/eslint-plugin @typescript-eslint/parser || npm install @typescript-eslint/eslint-plugin @typescript-eslint/parser

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Run performance tests
        run: npm run test:performance

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Clear npm cache
        run: npm cache clean --force

      - name: Remove package-lock.json if exists
        run: |
          if [ -f package-lock.json ]; then
            rm package-lock.json
          fi

      - name: Install dependencies
        run: npm install

      - name: Build application
        run: npm run deploy:build
        env:
          VITE_YOUTUBE_API_KEY: ${{ secrets.VITE_YOUTUBE_API_KEY }}
          VITE_APP_TITLE: ${{ vars.VITE_APP_TITLE || 'Personal Portal Site' }}
          VITE_APP_DESCRIPTION: ${{ vars.VITE_APP_DESCRIPTION || 'Modern personal portfolio and social media hub' }}

      - name: Verify build
        run: npm run deploy:verify

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 30

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        run: |
          aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }} \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" \
            --exclude "*.json"

          aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }} \
            --cache-control "no-cache" \
            --include "*.html" \
            --include "*.json"

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Post-deployment status check
        run: |
          echo "üîç Running post-deployment status check..."
          npm run deploy:status

      - name: Deployment notification
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "üìä Build info:"
          cat dist/build-info.json
          echo "üìã Verification report:"
          cat dist/verification-report.json
          echo ""
          echo "üåê Your site is being deployed to CloudFront..."
          echo "‚è≥ It may take 5-15 minutes for changes to be visible globally."

      - name: Deployment failure notification
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "üîç Check the logs above for error details."
          echo "üí° Common solutions:"
          echo "   - Verify AWS credentials are correct"
          echo "   - Check S3 bucket permissions"
          echo "   - Ensure CloudFront distribution exists"
          echo "   - Run 'npm run deploy:status' locally for diagnostics"

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Security scan
        run: |
          echo "üîç Running security checks..."

          # Check for sensitive files
          if find dist/ -name "*.env*" -o -name "*.key" -o -name "*.pem" | grep -q .; then
            echo "‚ùå Sensitive files found in build output!"
            exit 1
          fi

          # Check for large files
          find dist/ -size +5M -exec echo "‚ö†Ô∏è  Large file: {} " \;

          echo "‚úÖ Security scan completed"
